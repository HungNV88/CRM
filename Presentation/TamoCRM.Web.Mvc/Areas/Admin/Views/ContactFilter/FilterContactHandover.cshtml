@using MvcCheckBoxList.Model
@using TamoCRM.Core
@using TamoCRM.Domain.Catalogs
@using TamoCRM.Domain.ImportExcels
@using TamoCRM.Domain.Levels
@using TamoCRM.Domain.SourceTypes
@using TamoCRM.Web.Framework
@using TamoCRM.Domain.Channels
@using TamoCRM.Domain.StatusMap

@model TamoCRM.Web.Mvc.Areas.Admin.Models.Contacts.ContactCreateModel
@{
    ViewBag.Title = "Phân Contact cho TVTS";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    //var lstLevels = StoreData.SelectedList<LevelInfo>();
    //var lstContainers = StoreData.SelectedList<ContainerInfo>();
    //var lstSourceType = StoreData.SelectedList<SourceTypeInfo>();
    //var lstImportExcels = StoreData.SelectedList<ImportExcelInfo>();

    //ImportExcel
    var importExcel = ViewBag.ImportExcels;
    ((List<ImportExcelInfo>)importExcel).RemoveAll(c => c.ImportId == 0);
    ((List<ImportExcelInfo>)importExcel).Insert(0, new ImportExcelInfo { ImportId = 0, FilePath = "Tất cả" });
    var lstImportExcels = new SelectList(importExcel, "ImportId", "FilePath");

    //Containers
    var container = ViewBag.Containers;
    ((List<ContainerInfo>)container).RemoveAll(c => c.Id == 0);
    ((List<ContainerInfo>)container).Insert(0, new ContainerInfo { Id = 0, Name = "Tất cả" });
    var lstContainers = new SelectList(container, "Id", "Name");

    //Source Type
    var sourceType = ViewBag.SourceTypes;
    ((List<SourceTypeInfo>)sourceType).RemoveAll(c => c.SourceTypeId == 0);
    ((List<SourceTypeInfo>)sourceType).Insert(0, new SourceTypeInfo { SourceTypeId = 0, Name = "Tất cả" });
    var lstSourceType = new SelectList(sourceType, "SourceTypeId", "Name");

    //Level
    var levels = ViewBag.Levels;
    ((List<LevelInfo>)levels).RemoveAll(c => c.LevelId == 0);
    ((List<LevelInfo>)levels).Insert(0, new LevelInfo { LevelId = 0, Name = "Tất cả" });
    var lstLevels = new SelectList(levels, "LevelId", "Name");

    //StatusCares List
    var StatusCares = ViewBag.StatusCares;
    ((List<StatusCareInfo>)StatusCares).RemoveAll(c => c.Id == 0);
    ((List<StatusCareInfo>)StatusCares).Insert(0, new StatusCareInfo { Id = 0, Name = "Tất Cả" });
    var lstStatusCares = new SelectList(StatusCares, "Id", "Name");

    //StatusMaps List
    var StatusMaps = ViewBag.StatusMaps;
    ((List<StatusMapInfo>)StatusMaps).RemoveAll(c => c.Id == 0);
    ((List<StatusMapInfo>)StatusMaps).Insert(0, new StatusMapInfo { Id = 0, Name = "Tất Cả" });
    var lstStatusMaps = new SelectList(StatusMaps, "Id", "Name");

    //var StatusMaps = ViewBag.StatusMaps;
    //var lstStatusMaps = new SelectList(StatusMaps, "Id", "Name");

    //Product List
    var product = ViewBag.Products;
    ((List<ProductInfo>)product).RemoveAll(c => c.Id == 0);
    ((List<ProductInfo>)product).Insert(0, new ProductInfo { Id = 0, Name = "Tất cả" });
    var lstProducts = new SelectList(product, "Id", "Name");

    var lstStatus = Util.SelectedListInclude<StatusType>(true, (int)StatusType.New, (int)StatusType.AcceptCollaborator, (int)StatusType.RecoveryConsultant, (int)StatusType.DuplicateContact);
}

<style>
    .styled_checkbox {
        cursor: pointer;
        border-radius: 5px;
        margin: 3px;
        padding: 0 10px 0 2px;
    }

    .styled_list {
        padding: 3px 5px 3px 5px;
    }
</style>

<div class="breadcrumbs" id="breadcrumbs">
    <script type="text/javascript">
        try {
            ace.settings.check('breadcrumbs', 'fixed');
        }
        catch (e) {

        }
    </script>

    <ul class="breadcrumb">
        <li>
            <i class="icon-home home-icon"></i>
            <a href="#">Trang chủ</a>
        </li>

        <li>
            <a href="javascript:void(0);">Danh mục</a>
        </li>
        <li class="active">Contact</li>
    </ul>
</div>

<div class="page-content">
    <div class="page-header">
        <h1>@ViewBag.Title</h1>
    </div>
    <!-- /.page-header -->

    <div class="row">
        <div class="col-xs-12">
            <!-- PAGE CONTENT BEGINS -->
            @using (Ajax.BeginForm("FilterContactHandover", "ContactFilter", new AjaxOptions { HttpMethod = "POST" }, new { enctype = "multipart/form-data", @class = "form-horizontal", role = "form", id = "containerForm" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-group">
                    <div class="col-sm-12" id="alert">
                    </div>
                </div>                                
                <div class="form-group" style="margin-bottom: 5px;">
                    <div class="col-sm-8" id="divFilter">
                        <div style="border: 1px solid #c5d0dc; padding: 15px;">
                            <div class="row">
                                <div class="col-xs-6">
                                    <div class="col-sm-4">
                                        <label class="bolder">Nguồn</label>
                                    </div>
                                    <div class="col-sm-5">
                                        @Html.DropDownListFor(x => x.TypeId, lstSourceType, new { @class = "form-control", @style = "width: 180px;" })
                                    </div>
                                    <div class="row"></div>
                                    <div class="col-sm-4">
                                        <label class="bolder">Level</label>
                                    </div>
                                    <div class="col-sm-5">
                                        @Html.DropDownListFor(x => x.LevelId, lstLevels, new { @class = "form-control", @style = "width: 180px;" })
                                    </div>
                                    <div class="row"></div>
                                    <div class="col-sm-4">
                                        <label class="bolder">File</label>
                                    </div>
                                    <div class="col-sm-5">
                                        @Html.DropDownListFor(x => x.ImportId, lstImportExcels, new { @class = "form-control", @style = "width: 180px;" })
                                    </div>
                                    <div class="row"></div>
                                    <div class="col-sm-4">
                                        <label class="bolder">Trạng Thái</label>
                                    </div>
                                    <div class="col-sm-5">
                                        @Html.DropDownListFor(x => x.StatusId, lstStatus, new { @class = "form-control", @style = "width: 180px;" })
                                    </div>
                                    <div class="row"></div>
                                    <div class="col-sm-4">
                                        <label class="bolder">Kho Nguồn</label>
                                    </div>
                                    <div class="col-sm-5">
                                        @Html.DropDownListFor(x => x.ContainerId, lstContainers, new { @class = "form-control", @style = "width: 180px;" })
                                    </div>
                                    <div class="row"></div>
                                    <div class="col-sm-4">
                                        <label class="bolder">Trạng thái chăm sóc</label>
                                    </div>
                                    <div class="col-sm-5">
                                        @Html.DropDownListFor(x => x.StatusCareId, lstStatusCares, new { @id = "StatusCareId", @class = "form-control", @style = "width: 180px;" })
                                    </div>
                                    <div class="row"></div>
                                    <div class="col-sm-4">
                                        <label class="bolder">Trạng thái gọi</label>
                                    </div>
                                    <div class="col-sm-5">
                                        @Html.DropDownListFor(x => x.StatusMapId, lstStatusMaps, new { @id = "StatusMapId", @class = "form-control", @style = "width: 180px;" })
                                    </div>
                                </div>
                                <div class="col-xs-6">
                                    <div class="row" style="padding-right: 10px;">
                                        <input type="checkbox" name="chkChannels" id="chkChannels" style="margin-left: 11px;">
                                        <label class="bolder">
                                            Kênh
                                        </label>
                                        
                                        <br />
                                        <div id="divChannel" class="col-sm-12" style="max-height: 140px; overflow-y: auto; padding: 5px 10px;">
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div style="border: 1px solid #c5d0dc; padding: 15px;">
                            <div class="form-group">
                                <div class="col-sm-4">
                                    <label style="display: inline">Số lượng </label>
                                </div>
                                <div class="col-sm-8" style="padding: 0; padding-left: 3px;">
                                    @Html.TextBox("txtAmount", "0", "number", new { type = "number", min = "0", max = "10000", @readonly = true })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-4">
                                    <label>Cách chia</label>
                                </div>
                                <div class="col-sm-8" style="padding: 0;">
                                    @Html.CheckBoxList("DiviceType", model => Util.SelectedList<DiviceType>(false), model => model.Value, model => model.Text, model => model.Selected, new { @class = "styled_checkbox", @type = "radio" }, new HtmlListInfo(HtmlTag.vertical_columns, 0, new { @class = "styled_list" }), null, x => x.Value)
                                </div>
                            </div>
                            <div class="form-group" style="float: right; margin: 0;">
                                <button id="btnDivide" class="btn-primary">Chia Nháp</button>
                                <button id="btnSaveDraft" class="btn-primary" style="">Lưu Nháp</button>
                                <button id="btnClearDraft" class="btn-primary" style="">Xóa Nháp</button>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    </div>
                </div>
            }

            <div class="space-6"></div>
            <div class="col-sm-2" style="height: 30px; width: 90px;">
                <label class="bolder">Định Bán</label>
            </div>
            <div class="col-sm-2">
                @Html.DropDownListFor(x => x.ProductSellId, lstProducts, new { @class = "form-control", @style = "width: 180px;" })
            </div>
            <button id="btnHandover" class="btn-primary" style="float: right; margin-right: 10px;">Bàn giao cho TVTS</button>
            @Html.TextBox("HandoverDate", DateTime.Now.ToString("dd/MM/yyyy"), new { @style = "float: right; height: 25px; margin-right: 10px; width: 100px; " })
            <label style="float: right; margin-right: 10px; margin-top: 2px;">Bàn giao cho ngày</label>
            <div class="clearfix"></div>
            <div class="space-6"></div>
            <table id="grid-table"></table>
            <!-- PAGE CONTENT ENDS -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
</div>

<script type="text/javascript">
    var grid_selector = "#grid-table"; 
    var employeeTypeId = '@((int)EmployeeType.Consultant)';
    var hanoverDate = $('#HandoverDate').val();
  
    var url = 'admin/api/user/GetDraft?employeeTypeId={0}'.format(employeeTypeId);
    
    var heades = ['Id', 'Nhóm', 'Họ và tên', 'Nháp trước đó', 'Nháp hiện tại', 'Tổng số','Số contact đã phân theo ngày ban giao', 'Chỉ tiêu'];
    var model = [
        { name: 'Id', index: 'Id', editable: false, sorttype: 'string', editoptions: { disabled: true }, width: '0px' },
        { name: 'GroupName', index: 'GroupName', editable: false, sorttype: 'string' },
        { name: 'FullName', index: 'FullName', editable: false, sorttype: 'string' },
        { name: 'Draft', index: 'Draft', editable: false, sorttype: 'int' },
        { name: 'DraftNew', index: 'DraftNew', editable: true, sorttype: 'int', formatter: inputNumberFomatter },
        { name: 'Amount', index: 'Amount', editable: false, sorttype: 'int' },
        { name: 'CountContactDay', index: 'CountContactDay', editable: false, sorttype: 'int' },
        { name: 'Norms', index: 'Norms', editable: false, sorttype: 'int' }
    ];
    $(document).ready(function () {

        var lstChannels = @Html.Raw(Json.Encode(((IEnumerable<ChannelInfo>)ViewBag.Channels).Select(c => new { ChannelId = c.ChannelId, Name = c.Name })))
        
        $('select').chosen();
        checkAccountUseHandover();
        $($('.styled_list input')[0]).attr('checked', true);
        $('#HandoverDate').datepicker({ format: 'dd/mm/yyyy', autoclose: true, dateonly: true, startDate: "+0d" });
        setupGridTable("#grid-table", "", url, "admin/api/user/edit", "Id", "Danh sách Nhóm", heades, model, "", 1000, '350px');

        updateChannelCount();
        $('#divFilter select').change(function (e) {
            updateChannelCount();
        });

        $('#HandoverDate').change(function (e) {
            hanoverDate = $('#HandoverDate').val().replaceAll('/','!');
            var urlCountNorm = '/admin/api/user/GetDraftByDate?employeeTypeId={0}&hanoverDate={1}'.format(employeeTypeId, hanoverDate);
            jQuery(grid_selector).jqGrid().setGridParam({ url: urlCountNorm }).trigger("reloadGrid");
        });

        $('#chkChannels').click(function (e) {
            checkAllClassName('chkChannels', 'chkChannel');
        });
        $("#btnDivide").click(function (e) {
            e.preventDefault();
            var amount = parseInt($('#txtAmount').val());
            if (amount <= 0) {
                alertError('Số lượng cần chia bằng 0, thử lại sau!');
                return;
            }
            
            // Param
            var typeIds = $('#TypeId').val();
            var levelIds = $('#LevelId').val();
            var statusIds = getIds('StatusId');
            var importIds = $('#ImportId').val();
            var channelIds = buildParamChannel(globalChannels);
            var containerIds = $('#ContainerId').val();
            var channelAmounts = buildParamChannelAmount(globalChannels);
            var diviceType = $('.styled_list input:checked').val();
            var statusMapId = $("#StatusMapId").val();
            var statusCareId = $("#StatusCareId").val();
            var newUrl = "/admin/api/user/DiviceDraft?typeIds={0}&levelIds={1}&importIds={2}&statusIds={3}&containerIds={4}&channelIds={5}&channelAmounts={6}&diviceType={7}&employeeTypeId={8}&statusCareId={9}&statusMapId={10}".format(typeIds, levelIds, importIds, statusIds, containerIds, channelIds, channelAmounts, diviceType, employeeTypeId, statusCareId, statusMapId);
            jQuery(grid_selector).jqGrid().setGridParam({ url: newUrl }).trigger("reloadGrid");
        });
        $("#btnSaveDraft").click(function (e) {
            e.preventDefault();
            var total = parseInt($('#txtAmount').val());
            var amount = 0;
            var rows = $('input[name="cellAmount"]');
            for (var i = 0; i < rows.length; i++) {
                var value = parseInt(rows[i].value);
                amount += value;
            }
            if (amount > total) {
                alert('Số lượng chia hiện tại lớn hơn số lượng cần chia, thử lại sau!');
                return;
            }

            // Param
            var typeIds = $('#TypeId').val();
            var levelIds = $('#LevelId').val();
            var statusIds = getIds('StatusId');
            var importIds = $('#ImportId').val();
            var channelIds = buildParamChannel(lstChannels);
            var containerIds = $('#ContainerId').val();
            var channelAmounts = buildParamChannelAmount(lstChannels);
            var diviceType = $('.styled_list input:checked').val();
            var statusMapId = $("#StatusMapId").val();
            var statusCareId = $("#StatusCareId").val();

            var users = '';
            var amounts = '';
            var rows = $("#grid-table").getDataIDs();
            for (i = 1; i < rows.length + 1; i++) {
                users += i == 1 ? $('#grid-table').jqGrid('getCell', i, 'Id') : ',' + $('#grid-table').jqGrid('getCell', i, 'Id');
                var numId = $($('#grid-table').jqGrid('getCell', i, 'DraftNew')).attr('id');
                amounts += i == 1
                    ? $('#' + numId).val()
                    : ',' + $('#' + numId).val();
            }

            $.post("/admin/api/contact/SaveDraft", {
                users: users,
                amounts: amounts,
                typeIds: typeIds,
                diviceType: diviceType,
                levelIds: levelIds,
                importIds: importIds,
                statusIds: statusIds,
                channelIds: channelIds,
                containerIds: containerIds,
                employeeTypeId: employeeTypeId,
                channelAmounts: channelAmounts,
                statusMapId: statusMapId,
                statusCareId: statusCareId
            }).done(function (data) {
                alertSuccess(data);

                // Refesh
                newUrl = "/" + url;
                updateChannelCount();
                jQuery(grid_selector).jqGrid().setGridParam({ url: newUrl }).trigger("reloadGrid");
            });
        });
        $("#btnHandover").click(function (e) {
            e.preventDefault();
            var productSellId = $('#ProductSellId').val();

            $.ajax({
                type: 'POST',
                url: '/admin/api/contact/Handover',
                data: {
                    productSellId: productSellId,
                    employeeTypeId: employeeTypeId,
                    datetime: $('#HandoverDate').val(),
                },
                beforeSend: function () {
                    alertProcess();
                },
                success: function (response) {
                    alertSuccess("Trộn & đưa Lọc thành công " + response + " contacts");
                    $("#btnGoFilter").click();

                    // Refesh
                    newUrl = "/" + url;
                    updateChannelCount();
                    jQuery(grid_selector).jqGrid().setGridParam({ url: newUrl }).trigger("reloadGrid");
                },
                error: function (request, status, ex) {
                    alertError("Hệ thống bị lỗi, Trộn & đưa Lọc không thành công.");
                }
            });
        });

        $("#btnClearDraft").click(function (e) {
            e.preventDefault();

            $.ajax({
                type: 'POST',
                data: {
                    employeeTypeId: employeeTypeId
                },
                url: '/admin/api/contact/ClearDraft',
                success: function (data) {
                    alertSuccess(data);

                    // Refesh
                    newUrl = "/" + url;
                    updateChannelCount();
                    jQuery(grid_selector).jqGrid().setGridParam({ url: newUrl }).trigger("reloadGrid");
                },
                error: function (request, status, ex) {
                    alertError.html("Lọc contact không thành công.");
                }
            });
        });

        $("#StatusCareId").change(function () {
            loadStatusMapKhac(employeeTypeId);
        });
    });

    function checkDraftNew(elm, rowId) {
        var name = $('#grid-table').jqGrid('getCell', rowId, 'FullName');
        var draft = parseInt($('#grid-table').jqGrid('getCell', rowId, 'Draft'));
        var norms = parseInt($('#grid-table').jqGrid('getCell', rowId, 'Norms'));
        var total = parseInt(elm.value) + draft;
        if (total > norms) {
            alert('Số lượng được giao cho ' + name + ' lớn hơn chỉ tiêu, thử lại sau!');
            elm.value = norms - draft;
            return;
        }
        $('#grid-table').jqGrid("setCell", rowId, 'Amount', total);
    }

    function inputNumberFomatter(cellvalue, options, rowObject) {
        var rowId = options.rowId;
        return '<input id="' + rowObject.Id + '_Amount" max="10000" min="0" name="cellAmount" type="number" value="' + cellvalue + '" onchange="checkDraftNew(this, ' + rowId + ')">';
    }

    function updateChannelCount() {
        var typeId = $('#TypeId').val();
        var levelId = $('#LevelId').val();
        var statusIds = getIds('StatusId');
        var importIds = $('#ImportId').val();
        var containerId = $('#ContainerId').val();
        var statusMapId = $("#StatusMapId").val();
        var statusCareId = $("#StatusCareId").val();

        $.get("/admin/api/channel/FilterCountForHandover", {
            typeIds: typeId,
            levelIds: levelId,
            importIds: importIds,
            statusIds: statusIds,
            containerIds: containerId,
            employeeTypeId: employeeTypeId,
            //Thêm ngày 11/01/2016
            statusMapId: statusMapId,
            statusCareId: statusCareId
        }).done(function (data) {
            $('#txtAmount').val(0);
            $('#divChannel').html('');
            $('#divChannel').css('border', 'none');
            if (data != null && data.length > 0) {
                var html = '';
                for (var i = 0; i < data.length; i++) {
                    var item = data[i];
                    html += '<div style="float: left;padding-top:2px;">';
                    html += '<input type="checkbox" name="' + item.ChannelId + '_chkChannel" id="' + item.ChannelId + '_chkChannel" class="chkChannel" title="' + item.Name + '" value="' + item.Amount + '" />';
                    html += '<label for="' + item.ChannelId + '_chkChannel" id="' + item.ChannelId + '_lblChannel">&nbsp;' + item.Name.subStringEx(22) + '</label>';
                    html += '<label class="' + item.ChannelId + '_lblChannelCount">&nbsp;(<b>' + item.Amount + '</b>)</label>';
                    html += "</div>";

                    html += '<div style="float: right;">';
                    html += '<input name="' + item.ChannelId + '_txtChannelAmount" id="' + item.ChannelId + '_txtChannelAmount" max="' + item.Amount + '" min="0" type="number" value="0" style="width: 60px;">';
                    html += "</div>";

                    html += '<div class="clearfix" />';
                }
                if (html != '') {
                    $('#divChannel').html(html);
                    $('#divChannel').css('border', '1px solid #ccc');
                }

                $('#divChannel input[type="checkbox"]').change(function (e) {
                    var id = this.id.replaceAll('_chkChannel', '_txtChannelAmount');
                    
                    if (this.checked) {
                        $('#' + id).val(this.value);
                    } else {
                        $('#' + id).val(0);
                    }

                    var total = 0;
                    $('#divChannel input[type="number"]').each(function () {
                        total += parseInt(this.value);
                    });
                    $('#txtAmount').val(total);
                });

                $('#divChannel input[type="number"]').change(function (e) {
                    var total = 0;
                    $('#divChannel input[type="number"]').each(function () {
                        var id = this.id.replaceAll('_txtChannelAmount', '_chkChannel');
                        if ($('#' + id).is(':checked'))
                            total += parseInt(this.value);
                        else
                            $(this).val(0);
                    });
                    $('#txtAmount').val(total);
                });
            }
        });
    }
    
    function checkAccountUseHandover() {
        var status = '@ViewBag.StatusMessage';
        if (status.length > 0) {
            alertError(status);
            $('#btnDivide').attr('disabled', 'disabled');
            $('#btnHandover').attr('disabled', 'disabled');
            $('#btnSaveDraft').attr('disabled', 'disabled');
            $('#btnClearDraft').attr('disabled', 'disabled');
        }
    }
</script>