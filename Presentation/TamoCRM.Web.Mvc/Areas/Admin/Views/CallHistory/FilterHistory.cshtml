@using TamoCRM.Core
@using TamoCRM.Domain.Catalogs
@using TamoCRM.Domain.Groups
@using TamoCRM.Domain.StatusMap
@using TamoCRM.Domain.UserRole
@using TamoCRM.Web.Framework
@using TamoCRM.Web.Framework.Users
@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    // Group
    var user = UserContext.GetCurrentUser();
    var groups = (List<GroupInfo>)ViewBag.Groups;
    var branchId = UserContext.GetDefaultBranch();
    const int employeeId = (int)EmployeeType.Consultant;
    if (user.GroupConsultantType != (int)GroupConsultantType.ManagerConsultant)
    {
        groups = groups.Where(c => c.LeaderId == UserContext.GetCurrentUser().UserID || c.GroupId == (int)ViewBag.GroupId).ToList();
    }
    groups.RemoveAll(c => c.GroupId == 0);
    if (groups.Count > 1)
    {
        groups.Insert(0, new GroupInfo { GroupId = 0, Name = "Tất cả", BranchId = branchId, EmployeeTypeId = employeeId});
    }
    var lstGroups = new SelectList(groups.Where(c => c.BranchId == branchId).Where(c => c.EmployeeTypeId == employeeId), "GroupId", "Name");

    var lstLevels = ViewBag.Levels;

    //Users List
    var Users = ViewBag.Users;
    ((List<UserInfo>)Users).RemoveAll(c => c.UserID == 0);
    ((List<UserInfo>)Users).Insert(0, new UserInfo { UserID = 0, FullName = "Tất Cả" });
    var lstUsers = new SelectList(Users, "UserID", "FullName");

    //StatusCares List
    var StatusCares = ViewBag.StatusCares;
    ((List<StatusCareInfo>)StatusCares).RemoveAll(c => c.Id == 0);
    ((List<StatusCareInfo>)StatusCares).Insert(0, new StatusCareInfo { Id = 0, Name = "Tất Cả" });
    var lstStatusCares = new SelectList(StatusCares, "Id", "Name");

    //StatusMaps List
    var StatusMaps = ViewBag.StatusMaps;
    ((List<StatusMapInfo>)StatusMaps).RemoveAll(c => c.Id == 0);
    ((List<StatusMapInfo>)StatusMaps).Insert(0, new StatusMapInfo { Id = 0, Name = "Tất Cả" });
    var lstStatusMaps = new SelectList(StatusMaps, "Id", "Name");
}

<div class="breadcrumbs" id="breadcrumbs">
    <script type="text/javascript">
        try {
            ace.settings.check('breadcrumbs', 'fixed');
        } catch (e) { }
    </script>

    <ul class="breadcrumb">
        <li>
            <i class="icon-home home-icon"></i>
            <a href="#">Trang chủ</a>
        </li>

        <li>
            <a href="javascript:void(0);">Danh mục</a>
        </li>
        <li class="active">Danh sách cuộc gọi</li>
    </ul>
</div>

<div class="page-content">
    <div class="page-header">
        <h1>Danh sách cuộc gọi								
        </h1>
    </div>
    <!-- /.page-header -->

    <div class="row">
        <div class="col-xs-12">
            <div class="form-group">
                <div class="col-sm-12" id="alert">
                </div>
            </div>
            <div class="col-xs-12" style="border-bottom: 1px solid #c5d0dc; padding: 0 0 10px 0;">
                @using (Ajax.BeginForm("FilterHistory", "CallHistory", new AjaxOptions { HttpMethod = "POST" }, new { enctype = "multipart/form-data", @class = "form-horizontal", role = "form", id = "FilterHistory" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="col-sm-1">
                            <label class="bolder">Nhóm </label>
                        </div>
                        <div class="col-sm-2">
                            @Html.DropDownList("GroupId", lstGroups, new { @class = "form-control" })
                        </div>
                        <div class="col-sm-2">
                            <label class="bolder">Ngày bàn giao</label>
                        </div>
                        <div class="col-sm-2">
                            @Html.TextBox("HandoverDate", string.Empty, new { @class = "form-control" })
                        </div>
                        <div class="col-sm-2">
                            <label class="bolder">Trạng thái chăm sóc</label>
                        </div>
                        <div class="col-sm-3">
                            @Html.DropDownList("ddlStatusCare", lstStatusCares, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="space-4"></div>
                    <div class="row">
                        <div class="col-sm-1">
                            <label class="bolder">TVTS</label>
                        </div>
                        <div class="col-sm-2">
                            @Html.DropDownList("UserId", lstUsers, new { @class = "form-control" })
                        </div>
                        <div class="col-sm-2">
                            <label class="bolder">Ngày gọi</label>
                        </div>
                        <div class="col-sm-2">
                            @Html.TextBox("CallDate", string.Empty, new { @class = "form-control" })
                        </div>
                        <div class="col-sm-2">
                            <label class="bolder">Trạng thái gọi</label>
                        </div>
                        <div class="col-sm-3">
                            @Html.DropDownList("ddlStatusMap", lstStatusMaps, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="space-4"></div>
                    
                        <div class="row" id="divLevels"></div>
                        @*<div class="col-sm-1" style="width: 9%;">
                            <label class="bolder">Level</label>
                        </div>
                        <div class="col-sm-1" style="width: 7.67%;">
                            <input type="checkbox" id='chkLevels' checked />
                            <label>Tất cả</label>
                        </div>
                        @foreach (var item in lstLevels)
                        {
                            <div class="col-sm-1">
                                <input type="checkbox" name='chkLevels' id='@(item.LevelId)_chkLevel' />
                                <label for="@(item.LevelId)_chkLevel">@item.Name</label>
                            </div>
                        }*@
                        
                    <div class="space-4"></div>            
                }
            </div>

            <button id="btnSubmit" class="btn-primary" style="float: right; margin-right: 10px; margin-top: 10px;">Lọc cuộc gọi</button>
            <div class="clearfix"></div>
            <div class="space-6"></div>
            <table id="grid-table"></table>
            <div id="grid-pager"></div>
            <!-- PAGE CONTENT ENDS -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
</div>
<!-- /.page-content -->

<!-- inline scripts related to this page -->
<script type="text/javascript">
    var grid_selector = "#grid-table";
    var branchId = '@UserContext.GetDefaultBranch()';
    var employeeTypeId = '@((int)EmployeeType.Consultant)';
    
    var url = 'admin/api/callhistory/FilterHistory?groupId={0}&userId={1}&handoverDate={2}&callDate={3}&statusMapId={4}&statusCareId={5}&levelIds={6}&mobilePhone={7}&employeeTypeId=' + employeeTypeId;
    var heades = ['Id', 'Họ và tên', 'Level', 'Ngày', 'Sáng/Chiều', 'Giờ', 'Nội dung gọi gần nhất', 'Thời gian gọi', 'Trạng thái chăm sóc','ID TVTS', 'Nghe', 'Tải'];
    var model = [
        { name: 'CallHistoryId', index: 'CallHistoryId', editable: false, sorttype: 'string', editoptions: { disabled: true }, width: '0px' },
        {
            name: 'ContactName', index: 'ContactName', editable: false, width: '80px', align: 'center', formatter: "dynamicLink",
            formatoptions: {
                cellValue: function (cellValue, rowId, rowData, options) {
                    return '<div style="color:#34810c;margin:5px;"><a href="/admin/contactlevelinfo/edit/' + rowData.ContactId + '">' + rowData.ContactName + '</a></div>';
                }
            }
        },
        { name: 'LevelId', index: 'LevelId', editable: false, width: '30px', sorttype: 'string', align: 'center', formatter: levelFomatter },
        { name: 'RecallTime', index: 'RecallTime', editable: false, width: '60px', align: 'center', formatter: 'date', formatoptions: { srcformat: 'Y-m-dTH:i:s', newformat: 'd/m/Y' } },
        { name: 'RecallTimeAmPm', index: 'RecallTime', editable: false, width: '50px', align: 'center', formatter: stringFormatter },
        { name: 'RecallTimeTime', index: 'RecallTime', editable: false, width: '40px', align: 'center', formatter: 'date', formatoptions: { srcformat: 'Y-m-dTH:i:s', newformat: 'H:i' } },
        { name: 'CallCenterInfo', index: 'CallCenterInfo', editable: false, width: '150px', sorttype: 'string', align: 'left' },
        { name: 'CallTime', index: 'CallTime', editable: false, sorttype: 'string', width: '80px', formatter: 'date', formatoptions: { srcformat: 'Y-m-dTH:i:s', newformat: 'd/m/Y H:i' } },
        { name: 'StatusCareId', index: 'StatusCareId', editable: false, width: '120px', formatter: statusCareFomatter },
        { name: 'UserName', index: 'UserName', editable: false, width: '40px', formatter: statusCareFomatter },
        { name: 'LinkRecord', index: 'LinkRecord', editable: false, align: 'center', width: '100px', formatter: listenFomatter },
        {
            name: 'Download', index: 'Download', editable: false, width: '40px', align: 'center', formatter: "dynamicLink",
            formatoptions: {
                cellValue: function (cellValue, rowId, rowData, options) {
                    if (rowData.LinkRecord == null || rowData.LinkRecord.length == 0) {
                        return '';
                    }
                    return '<div style="color:#34810c;margin:5px;"><a href="' + rowData.LinkRecord + '"><img style="width:16px; height:16px;" src="../../../../Images/download-16.png"/></a></div>';
                }
            }
        }
    ];
    
    function initForm() {
        $('#UserId').chosen();
        loadStatusMap(employeeTypeId);
        var groupId = $("#GroupId").val();
        loadUser(branchId, groupId, employeeTypeId, "UserId");
        $('#CallDate').datepicker({ format: 'dd/mm/yyyy', autoclose: true, dateonly: true, endDate: "+1d" });
        $('#HandoverDate').datepicker({ format: 'dd/mm/yyyy', autoclose: true, dateonly: true, endDate: "+1d" });
        setupGridWithoutEdit("#grid-table", "#grid-pager", "", "admin/api/callhistory/edit", "CallHistoryId", "Danh sách cuộc gọi", heades, model);
        $(grid_selector).jqGrid("setGroupHeaders", {
            useColSpanStyle: true,
            groupHeaders: [
                { startColumnName: "ContactName", numberOfColumns: 2, titleText: '<table style="width:100%;border-spacing:0px;"><tr><td style="text-align:center;height:40px;"><b>Thông tin Contact</b></td></tr></table>' },
                { startColumnName: "AppointmentDate", numberOfColumns: 3, titleText: '<table style="width:100%;border-spacing:0px;"><tr><td style="text-align:center;"><b>Thông tin lịch hẹn gọi lại</b></td></tr></table>' },
                { startColumnName: "CallInfo", numberOfColumns: 4, titleText: '<table style="width:100%;border-spacing:0px;"><tr><td style="text-align:center;"><b>Tình trạng chăm sóc</b></td></tr></table>' },
                { startColumnName: "LinkRecord", numberOfColumns: 2, titleText: '<table style="width:100%;border-spacing:0px;"><tr><td style="text-align:center;"><b>Chức năng</b></td></tr></table>' }
            ]
        });
    }
    
    $(document).ready(function () {
        initForm();
        loadLevels();
    });

    $("#btnSubmit").click(function (e) {
        e.preventDefault();

        // Param
        var userId = $('#UserId').val();
        var groupId = $('#GroupId').val();
        var callDate = $('#CallDate').val();
        var statusMapId = $('#ddlStatusMap').val();
        var handoverDate = $('#HandoverDate').val();
        var statusCareId = $('#ddlStatusCare').val();
        var levelIds = $('#chkLevels').is(':checked') ? '' : buildParamLevels();
        var mobilePhone = '';
        // Format Url
        var newUrl = '/' + url.format(groupId, userId, handoverDate, callDate, statusMapId, statusCareId, levelIds, mobilePhone);
        jQuery(grid_selector).jqGrid().setGridParam({ url: newUrl }).trigger("reloadGrid");
    });

    $("#ddlStatusCare").change(function () {
        loadStatusMap(employeeTypeId);
    });
    
    $("#GroupId").change(function () {
        var groupId = $("#GroupId").val();
        loadUser(branchId, groupId, employeeTypeId, "UserId");
    });

    $('#chkLevels').change(function () {
        if ($('#chkLevels').is(':checked')) {
            var elements = document.getElementsByName('chkLevels');
            for (var i = 0; i < elements.length; i++) {
                $(elements[i]).attr('checked', false);
            }
        }
    });
    $('input[name="chkLevels"]').change(function () {
        if ($(this).is(':checked')) $('#chkLevels').attr('checked', false);
    });

    var prevCellCallAmount = { cellId: undefined, value: undefined };
    var prevCellContactName = { cellId: undefined, value: undefined };
    function arrtSetting(rowId, val, rawObject, cm) {
        var result;
        var prevCellVal = null;
        if (cm.name == 'ContactName')
            prevCellVal = prevCellContactName;
        else if (cm.name == 'CallAmount')
            prevCellVal = prevCellCallAmount;

        val = rawObject.ContactId;
        if (prevCellVal != null) {
            if (prevCellVal.value == val) {
                result = ' style="display: none" rowspanid="' + prevCellVal.cellId + '"';
            } else {
                var cellId = this.id + '_row_' + rowId + '_' + cm.name;

                result = ' rowspan="1" id="' + cellId + '"';
                prevCellVal = { cellId: cellId, value: val };
            }

            if (cm.name == 'ContactName')
                prevCellContactName = prevCellVal;
            else if (cm.name == 'CallAmount')
                prevCellCallAmount = prevCellVal;
            return result;
        }
        return '';
    };

    function loadLevels() {
        $('#divLevels').html('');
        var userIds = $('#UserId').val();
        if (userIds == 0) userIds = $('#GroupId').val() != 0 ? getIds('UserId') : '';
        $.ajax({
            type: 'GET',
            url: '/admin/api/level/GetLevelWithCallHistoryCount',
            data: {
                groupUserId: $('#GroupId').val(),
                userIds: 0,
                hanoverDate: '',
                callTime:'',
                statusCare: 0,
                statusMap: 0
            },
            success: function (data) {
                if (data != null && data.length > 0) {
                   
                    var total = 0;
                    for (var i = 0; i < data.length; i++) {
                        total += parseInt(data[i].ContactCount);
                    }
                    var html = '';
                    html += '<div class="col-sm-1">' +
                        '<label class="bolder">Level</label>' +
                        '</div>' +
                        '<div class="col-sm-1" style="width: 12.3%;">' +
                        '<input type="checkbox" id="chkLevels" checked />' +
                        '<label>Tất cả (' + total + ')</label>' +
                        '</div>';
                    for (var i = 0; i < data.length; i++) {
                        var item = data[i];
                        if (item.LevelId <= 10) {
                            html += '<div class="col-sm-1" style="width: 9%;">' +
                                '<input type="checkbox" name="chkLevels" id="' + item.LevelId + '_chkLevel" />' +
                                '<label for="' + item.LevelId + '_chkLevel">' + item.Name + ' (' + item.ContactCount + ')</label>' +
                                '</div>';
                        }
                    }
                    $('#divLevels').html(html);
                    reloadGrid();

                    $('#chkLevels').change(function () {
                        if ($('#chkLevels').is(':checked')) {
                            var elements = document.getElementsByName('chkLevels');
                            for (var i = 0; i < elements.length; i++) {
                                $(elements[i]).attr('checked', false);
                            }
                            var levelIds = $('#chkLevels').is(':checked') ? '' : buildParamLevels();
                            loadStatusMapByLevel(levelIds, employeeTypeId);
                        }
                    });
                    $('input[name="chkLevels"]').change(function () {
                        $('#chkLevels').attr('checked', false);
                        var levelIds = $('#chkLevels').is(':checked') ? '' : buildParamLevels();
                        loadStatusMapByLevel(levelIds, employeeTypeId);
                    });

                    var levelIds = $('#chkLevels').is(':checked') ? '' : buildParamLevels();
                    loadStatusMapByLevel(levelIds, employeeTypeId);
                }
            },
            error: function (request, status, ex) {
                alertError("Hệ thống bị lỗi, không thể tải danh sách level.");
            }
        });
    }

</script>
